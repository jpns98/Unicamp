Algoritmo2
Método de elementos finitos utilizando elementos quadráticos e regra da quadratura gaussiana, com 4 pontos, para integração numérica

#integral numérica com quadratura gaussiana
GaussQ[g_, n_, a_, b_] := 
 Total[g[First[#]]*Last[#] & /@ GaussianQuadratureWeights[n, a, b]]

#dados
$\alpha$ = 1; $\gamma$= 1;
u0 = 0; u1 = 0;
n = 10; h = 1/n; np = 4; m = n*2 + 1
f[x_] := x

#base polinomial quadrática
$\varphi$ = {InterpolatingPolynomial[{{-1, 1}, {0, 0}, {1, 
     0}}, $\xi$], 
  InterpolatingPolynomial[{{-1, 0}, {0, 1}, {1, 0}}, $\xi$], 
  InterpolatingPolynomial[{{-1, 0}, {0, 0}, {1, 1}}, $\xi$]}

K = {{, ,}, {, ,}, {, ,}}
K = $\alpha$*(2/h)*
   Table[GaussQ[
     D[$\varphi$[[r]], $\xi$]*
        D[$\varphi$[[s]], $\xi$] /. $\xi$ -> # &, np, -1, 1], {r, 
     3}, {s, 3}] + $\gamma$*(h/2)*
   Table[GaussQ[$\varphi$[[r]]*$\varphi$[[s]] /. $\xi$ -> # &, 
     np, -1, 1], {r, 3}, {s, 3}]


F1 = ConstantArray[0, {m}]
For[i = 1, i < m, i = i + 2,
 
 F1[[i ;; i + 2]] = 
   F1[[i ;; i + 2]] + (h/2)*
     Table[GaussQ[((f[x] /. 
             x -> (h/2*(i - 1) + 
                h/2*($\xi$ + 1)))*$\varphi$[[r]]) /. $\xi$ -> # &, 
       np, -1, 1], {r, 3}];
 ]
K1 = ConstantArray[0, {m, m}]
For[i = 1, i < m - 1, i = i + 2,
 K1[[i ;; i + 2, i ;; i + 2]] = K1[[i ;; i + 2, i ;; i + 2]] + K;
 ]

#impondo condições de contorno
F1[[1]] = u0
F1[[m]] = u1
F1[[2]] = F1[[2]] - K1[[2, 1]]*u0
F1[[3]] = F1[[3]] - K1[[3, 1]]*u0
F1[[m - 1]] = F1[[m - 1]] - K1[[m - 1, m]]*u1
F1[[m - 2]] = F1[[m - 2]] - K1[[m - 2, m]]*u1
K1[[1, 1 ;; 3]] = {1, 0, 0}
K1[[1 ;; 3, 1]] = {1, 0, 0}
K1[[m, m - 2 ;; m]] = {0, 0, 1}
K1[[m - 2 ;; m, m]] = {0, 0, 1}

w = LinearSolve[K1, F1]

LagrangeP[
  p1_] := {Piecewise[{{InterpolatingPolynomial[{{p1, 1}, {p1 + h/2, 
        0}, {p1 + h, 0}}, x], p1 <= x <= p1 + h}}, 0], 
  Piecewise[{{InterpolatingPolynomial[{{p1, 0}, {p1 + h/2, 
        1}, {p1 + h, 0}}, x], p1 <= x <= p1 + h}}, 0], 
  Piecewise[{{InterpolatingPolynomial[{{p1, 0}, {p1 + h/2, 
        0}, {p1 + h, 1}}, x], p1 <= x <= p1 + h}}, 0]}

$\Phi$ = {}
For[i = 1, i <= n, i++,
 AppendTo[$\Phi$], LagrangeP[(i - 1)*h][[1]]];
 AppendTo[$\Phi$], LagrangeP[(i - 1)*h][[2]]];
 AppendTo[$\Phi$], LagrangeP[(i - 1)*h][[3]]]
 ]

W1 = {w[[1]]}
For[i = 2, i < m, i++,
 W1 = Join[W1, ConstantArray[w[[i]], {Mod[i, 2] + 1}]]
 ]
W1 = Join[W1, {w[[m]]}]

Uh[x_] := W1.$\Phi$